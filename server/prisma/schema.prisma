// server/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  PREMIUM
  RANGER
  ADMIN
  SUPER_ADMIN
}

enum CrowdLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String
  password          String
  role              UserRole  @default(USER)
  isVerified        Boolean   @default(false)
  isActive          Boolean   @default(true)
  avatar            String?
  bio               String?
  location          String?
  lastLoginAt       DateTime?
  passwordChangedAt DateTime?
  emailVerifiedAt   DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  reviews           Review[]
  favorites         Favorite[]
  trips             Trip[]
  visits            Visit[]
  photos            Photo[]
  apiKeys           ApiKey[]

  @@map("users")
}

model Park {
  id              String     @id @default(cuid())
  name            String
  slug            String     @unique
  state           String
  description     String
  fullDescription String?
  images          String[]
  activities      String[]
  coordinates     Json       // { lat: number, lng: number }
  popularityScore Float      @default(0)
  crowdLevel      CrowdLevel @default(MEDIUM)
  bestTimeToVisit String[]
  fees            Json?      // { entrance: number, camping: number, etc. }
  contact         Json?      // { phone: string, email: string, website: string }
  amenities       String[]
  accessibility   String[]
  rules           String[]
  alerts          String[]
  weatherStation  String?
  npsId           String?    @unique
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  reviews         Review[]
  favorites       Favorite[]
  trips           Trip[]
  visits          Visit[]
  photos          Photo[]
  trails          Trail[]

  @@map("parks")
}

model Review {
  id          String    @id @default(cuid())
  userId      String
  parkId      String
  rating      Int       // 1-5 stars
  title       String
  content     String
  images      String[]
  tags        String[]
  isVerified  Boolean   @default(false) // Verified visit
  isPublished Boolean   @default(true)
  visitDate   DateTime?
  helpfulVotes Int      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  park        Park      @relation(fields: [parkId], references: [id], onDelete: Cascade)

  @@unique([userId, parkId]) // One review per user per park
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  parkId    String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  park      Park     @relation(fields: [parkId], references: [id], onDelete: Cascade)

  @@unique([userId, parkId])
  @@map("favorites")
}

model Trip {
  id          String     @id @default(cuid())
  userId      String
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isPublic    Boolean    @default(false)
  budget      Float?
  status      String     @default("planned") // planned, active, completed, cancelled
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parks       Park[]
  visits      Visit[]

  @@map("trips")
}

model Visit {
  id         String    @id @default(cuid())
  userId     String
  parkId     String
  tripId     String?
  visitDate  DateTime
  duration   Int?      // minutes
  notes      String?
  weather    Json?     // weather conditions during visit
  crowdLevel CrowdLevel?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  park       Park      @relation(fields: [parkId], references: [id], onDelete: Cascade)
  trip       Trip?     @relation(fields: [tripId], references: [id], onDelete: SetNull)

  @@map("visits")
}

model Photo {
  id          String   @id @default(cuid())
  userId      String
  parkId      String?
  url         String
  thumbnailUrl String?
  caption     String?
  tags        String[]
  location    Json?    // GPS coordinates
  metadata    Json?    // EXIF data, camera info, etc.
  isPublic    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  uploadedAt  DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  park        Park?    @relation(fields: [parkId], references: [id], onDelete: SetNull)

  @@map("photos")
}

model Trail {
  id          String   @id @default(cuid())
  parkId      String
  name        String
  description String?
  difficulty  String   // easy, moderate, hard, expert
  length      Float    // miles
  elevationGain Int?   // feet
  duration    Int?     // estimated minutes
  type        String   // loop, out-and-back, point-to-point
  features    String[] // waterfall, wildlife, scenic-views, etc.
  conditions  String[] // well-maintained, rocky, muddy, etc.
  coordinates Json     // GPS waypoints
  isOpen      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  park        Park     @relation(fields: [parkId], references: [id], onDelete: Cascade)

  @@map("trails")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  hashedKey   String   @unique
  isActive    Boolean  @default(true)
  rateLimit   Int      @default(1000) // requests per hour
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  expiresAt   DateTime?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}
